{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","undefined","userLocation","setUserLocation","errorMessage","setErrorMessage","useEffect","setInterval","currentLocation","message","lat","lng","NotificationManager","info","error","window","navigator","geolocation","getCurrentPosition","position","location","coords","latitude","longitude","0","1","2","3","code","className","src","logo","alt","href","target","rel","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,wMCuF5BC,G,MAjFH,WAAO,IAAD,EACwBC,wBAASC,GADjC,mBACTC,EADS,KACKC,EADL,OAEwBH,wBAASC,GAFjC,mBAETG,EAFS,KAEKC,EAFL,KAIhBC,qBAAU,WAIRC,aAAY,WACVC,MAHa,OAMd,IAEHF,qBAAU,WACR,GAAIJ,EAAc,CAChB,IAAMO,EAAO,mBAAeP,EAAaQ,IAA5B,sBAA6CR,EAAaS,KACvEC,sBAAoBC,KAAKJ,EAAS,WAAY,QAE/C,CAACP,IAEJI,qBAAU,WACJF,GACFQ,sBAAoBE,MAAMV,EAAc,WAAY,OAErD,CAACA,IAEJ,IAAMI,EAAkB,gBACeP,IAAjCc,OAAOC,UAAUC,aACnBF,OAAOC,UAAUC,YAAYC,oBAAmB,SAACC,GAG/C,IAAMC,EAAW,CACfV,IAAKS,EAASE,OAAOC,SAAWH,EAASE,OAAOC,cAAWrB,EAC3DU,IAAKQ,EAASE,OAAOE,UAAYJ,EAASE,OAAOE,eAAYtB,GAG/DE,EAAgBiB,MAEf,SAACN,GAWFT,EARmB,CACjBmB,EAAG,uCACHC,EAAG,qEACHC,EAAG,mDACHC,EAAG,wCAIsBb,EAAMc,WAKvC,OACE,kBAAC,WAAD,KACE,kBAAC,wBAAD,MAIA,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,oBC7DUC,QACW,cAA7BrB,OAAOK,SAASiB,UAEe,UAA7BtB,OAAOK,SAASiB,UAEhBtB,OAAOK,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmB1B,WACrBA,UAAU2B,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAML,c","file":"static/js/main.81a07493.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect, Fragment } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\n\nconst App = () => {\n  const [userLocation, setUserLocation] = useState(undefined);\n  const [errorMessage, setErrorMessage] = useState(undefined)\n\n  useEffect(() => {\n    \n    const second = 10 * 1000;\n\n    setInterval(function () {\n      currentLocation();\n    }, second);\n\n  }, []);\n\n  useEffect(() => {\n    if (userLocation) {\n      const message = `Latitude:${userLocation.lat} Longitude:${userLocation.lng}`\n      NotificationManager.info(message, \"Location\", 5000);\n    }\n  }, [userLocation]);\n\n  useEffect(() => {\n    if (errorMessage) {\n      NotificationManager.error(errorMessage, \"Location\", 5000);\n    }\n  }, [errorMessage]);\n\n  const currentLocation = () => {\n    if (window.navigator.geolocation !== undefined) {\n      window.navigator.geolocation.getCurrentPosition((position) => {\n        // granted\n\n        const location = {\n          lat: position.coords.latitude ? position.coords.latitude : undefined,\n          lng: position.coords.longitude ? position.coords.longitude : undefined,\n        }\n\n        setUserLocation(location);\n\n      }, (error) => {\n        // denied\n\n        const errorTypes = {\n          0: \"不明原因錯誤\",\n          1: \"使用者拒絕提供位置資訊\",\n          2: \"無法取得位置資訊\",\n          3: \"位置查詢逾時\"\n        };\n\n        // console.log(errorTypes[error.code]);\n        setErrorMessage(errorTypes[error.code])\n      });\n    }\n  }\n\n  return (\n    <Fragment>\n      <NotificationContainer />\n\n\n\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n        </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n        </a>\n        </header>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}